#!/usr/bin/perl

#-----------------------------------------------------------------------------
# POD Format Documentation.  Read "perldoc perlpod" for an example.
# When done, check syntax with "podchecker".

=head1 NAME

gitrbranch - check out a specific commit

=head1 SYNOPSIS

gitrbranch [--help] -r rev [--no-branch] [--name branchname]

=head1 DESCRIPTION

This script can be used in git or git-svn repos, and can be used to 
check out a known good commit and work from that until ready to dcommit/push.

Alternatively, this can be used to check out a specific (bad) commit for debug purposes.

Options:

=over 4

=item -r nnnnn

A subversion revision number or git commit hash.

=item --no-branch

don't create a branch

=item --name branchname

What to call the branch.

=back 

=head1 SUPPORTED PLATFORMS

 Unix (Linux verified)

=head1 SUPPORT

 Send email to peeter.joot@lzlabs.com

=head1 AUTHORS

 Peeter Joot

=cut

#-----------------------------------------------------------------------------

use strict ;
use warnings ;
use Getopt::Long ;
use Pod::Usage ;

# Suppress sourcing of users' .bashrc files in invoked shells
delete $ENV{'ENV'} ;
delete $ENV{'BASH_ENV'} ;

# Set STDOUT and STDERR to unbuffered
select STDERR ; $| = 1 ;
select STDOUT ; $| = 1 ;

my $myName = '' ;
my $rev ;
my $branch = 1 ;
my $name ;

($myName = $0) =~ s@.*[/\\]@@ ;

GetOptions ( 
   'name=s'             => \$name,
   'branch!'            => \$branch,
   'r=s'                => \$rev,
   'help'               => sub { pod2usage(-verbose => 2) ; },
) or pod2usage(-verbose => 0) ;

# Validate/handle options, and everything else...

die "$myName: required param '-rev nnnnn' was not specified" unless ( defined $rev ) ;

my $c ;
my $rc = verbose_system( 'git svn info >/dev/null 2>&1' ) ;
if ( $rc )
{
   $c = $rev ;
}
else
{
   $c = verbose_bq( "git svn find-rev r$rev" ) ;
}

if ( $c eq $rev )
{
   $rev = verbose_bq( "git rev-parse --short HEAD" ) ;
}

unless ( defined $name )
{
   $name = "r$rev" ;
}

my $cmd = "git checkout $c\n" ;
if ( $branch )
{
   $cmd .= "git checkout -b $name\n" ;
}
verbose_system( $cmd ) ;

exit 0 ;

sub verbose_bq
{
   my ($cmd) = @_ ;

   my $out = `$cmd` ; chomp $out ;
   print "# $cmd: $out\n" ;

   return $out ;
}

sub verbose_system
{
   my ($cmd) = @_ ;
 
   print "# $cmd\n" ; 
   system( $cmd ) ; 

   return ( $? >> 8 ) ;
}
